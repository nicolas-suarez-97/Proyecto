#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 12, 2018 12:42:51 PM
#    May 14, 2018 06:37:00 PM
#    May 15, 2018 11:48:35 AM
#    May 15, 2018 01:26:03 PM


import sys
import statsmodels.api as sm
from sklearn import datasets
import matplotlib.pyplot as plt
import os
import numpy as np
import pylab as pl
import xlrd

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
    from tkinter import messagebox

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global entry1
    entry1 = StringVar()
    global entry2
    entry2 = StringVar()
    global combo1
    combo1 = StringVar()
    global combo2
    combo2 = StringVar()
    global precio
    precio = StringVar()
    global combo3
    combo3 = StringVar()
    global ganancia
    ganancia = StringVar()
    global prod
    prod = StringVar()

def calcular():
    print('proyecto_support.calcular')
    sys.stdout.flush()
    try:
        #DATOS A USAR
        inversion = int(entry1.get())
        hectareas = int(entry2.get())
        mes = combo1.get()
        tipo = combo2.get()
        ciudad = combo3.get()
        precip = 0

        if mes == "Enero":
            precip = 59
            img = PhotoImage(file="./Imagenes/enero.png")
        if mes == "Febrero":
            precip = 123
            img = PhotoImage(file="./Imagenes/febrero.png")
        if mes == "Marzo":
            precip=122
            img = PhotoImage(file="./Imagenes/marzo.png")
        if mes == "Abril":
            precip=102
            img = PhotoImage(file="./Imagenes/abril.png")
        if mes == "Mayo":
            precip=92
            img = PhotoImage(file="./Imagenes/mayo.png")
        if mes == "Junio":
            precip=84
            img = PhotoImage(file="./Imagenes/junio.png")
        if mes == "Julio":
            precip=81
            img = PhotoImage(file="./Imagenes/julio.png")
        if mes == "Agosto":
            precip=125
            img = PhotoImage(file="./Imagenes/agosto.png")
        if mes == "Septiembre":
            precip=99
            img = PhotoImage(file="./Imagenes/septiembre.png")
        if mes == "Octubre":
            precip=47
            img = PhotoImage(file="./Imagenes/noviembre.png")
        if mes == "Noviembre":
            precip=45
            img = PhotoImage(file="./Imagenes/noviembre.png")
        if mes == "Diciembre":
            precip=50
            img = PhotoImage(file="./Imagenes/diciembre.png")


        if tipo == "Papa" and mes != "" and ciudad != "":

            ##REGRE.PY
            # Open a workbook
            workbook = xlrd.open_workbook('pPapa.xlsx')

            # Loads only current sheets to memory
            workbook = xlrd.open_workbook('pPapa.xlsx', on_demand = True)

            # Load a specific sheet by name
            ws = workbook.sheet_by_name('BD')

            # Load a specific sheet by index
            ws = workbook.sheet_by_index(0)
            x = []
            y = []
            i = 0
            # Retrieve the value from cell at indices (0,0)
            filinicio=0
            filfin=0
            if ciudad=="Tunja":
                filinicio=34
                filfin=46
            if ciudad=="Duitama":
                filinicio=3
                filfin=14
            if ciudad=="Sogamoso":
                filinicio=18
                filfin=30

            for rx in range(filinicio,filfin):
                x.append(ws.cell_value(rowx=rx, colx=10))
                y.append(ws.cell_value(rowx=rx, colx=11))

            x = sm.add_constant(x)
            model = sm.OLS(y, x).fit() ## sm.OLS(output, input)
            print (x)
            predictions = model.predict(x)
            print (predictions)
            arr = [precip,precip+1]
            arr = sm.add_constant(arr)
            pre = model.predict(arr) #predecir el precio para precipitaciones = 20 y 15
            auxiliar = pre[0]*30*hectareas*10000
            val = hectareas * 16
            resProd = (auxiliar*350000)/101150000
            a = (resProd * pre[0])- inversion
            total= a - inversion
            print("AQUI")

            print (model.summary())

            #fig = plt.figure(figsize=(12, 14))
            #fig = sm.graphics.plot_ccpr_grid(model, fig=fig)

            fig, ax = plt.subplots(figsize=(12,8))
            ax.plot(x, y, 'o', label="data")
            ax.plot(x, model.fittedvalues, 'r--.', label="OLS")
            ax.legend(loc='best');
            pl.savefig("graph.png",dpi=40)

            precio.set(round(pre[0]*100,0))
            prod.set(round(resProd,0))
            ganancia.set(round(total,0))

            #ASIGNAR IMAGEN
            try:
                w.Map.configure(image=img)
                w.Map.image=img
                img = PhotoImage(file="./graph.png")
                w.Label11.configure(image=img)
                w.Label11.image=img
            except:
                messagebox.errorwarning("Error","No se pudo graficar")

            #ASIGNAR VALORES DE ACUERDO A LA REGRESION
        #End:if
        else:
            messagebox.showwarning("Warning","Falta ingresar algun dato")
        #End:if

        if tipo == "Yuca":
            messagebox.showinfo("APP","Estamos trabajando en la opcion de \"Yuca\"")
        if tipo == "Cafe":
            messagebox.showinfo("APP","Estamos trabajando en la opcion de \"Cafe\"")
    except :
        messagebox.showwarning("Warning","Error de datos")


def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    try:
        os.remove("graph.png")
    except OSError:
        pass
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import proyecto
    proyecto.vp_start_gui()
